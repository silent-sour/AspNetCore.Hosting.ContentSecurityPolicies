name: "Build, test, pack, and release to GitHub and NuGet"

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true
  NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
  SOLUTION_NAME: AspNetCore.Hosting.ContentSecurityPolicies.sln
  
on:
  push:
    branches: [ "main" ]


jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: "Checkout source"
      id: checkout
      uses: actions/checkout@v4
      
    - name: Setup .NET
      id: setup
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
        cache: true
        
    - name: Install dependencies
      id: restore
      run: dotnet restore ${{ env.SOLUTION_NAME }}
        
    - name: Build .NET Library
      id: build
      run: dotnet build ${{ env.SOLUTION_NAME }} -c Release --no-restore  
    
    - name: Get Version to tag and notes
      id: get-release-info
      run: |
        echo "::set-output name=version::v$(grep -oP '<AssemblyVersion>\K[^<]*' "./src/AspNetCore.Hosting.ContentSecurityPolicies.csproj")"
        echo "::set-output name=notes::$(grep -oP '<PackageReleaseNotes>\K[^<]*' "./src/AspNetCore.Hosting.ContentSecurityPolicies.csproj")

    - name: GitHub Release
      id: release
      run: gh release create ${{steps.get-release-info.outputs.version}} --title "${{steps.get-release-info.outputs.version}}" --notes "${{steps.get-release-info.outputs.notes}}"
    
    - name: Pack 
      id: pack
      run: dotnet pack ${{ env.SOLUTION_NAME }} --no-build -c Release -o nupkgs
        
    - name: NuGet Push
      id: push
      working-directory: nupkgs
      run: dotnet nuget push AspNetCore.Hosting.ContentSecurityPolicies.*.nupkg --source https://api.nuget.org/v3/index.json --skip-duplicate -k  ${{ env.NUGET_API_KEY }}
      